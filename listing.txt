0000    5B 00 00 00                                  | in             // input n
0001    44 00 00 00    02 00 00 00    02 00 00 00    | pop cx
0004    43 00 00 00    00 00 00 00    01 00 00 00    | push 1         // counter
0007    44 00 00 00    02 00 00 00    03 00 00 00    | pop dx
0010    43 00 00 00    00 00 00 00    00 00 00 00    | push 0         // the first two Fibonacci
0013    43 00 00 00    00 00 00 00    01 00 00 00    | push 1         // numbers
0016    43 00 00 00    02 00 00 00    02 00 00 00    | push cx        // if n == 1
0019    43 00 00 00    02 00 00 00    03 00 00 00    | push dx
0022    4D 00 00 00    1A 00 00 00                   | je END:
0024    4F 00 00 00    1C 00 00 00                   | call fibonacci:        // function to find the nu0025    FF FF FF FF                                  | mber
0026    42 00 00 00                                  | out
0027    41 00 00 00                                  | end            //<--END
0028    44 00 00 00    02 00 00 00    01 00 00 00    |     pop R1     // R1 = F(n+1)
0031    44 00 00 00    02 00 00 00    00 00 00 00    |     pop R0     // R0 = F(n)
0034    43 00 00 00    02 00 00 00    01 00 00 00    |     push R1    // stack = [F(n+1),F(n+1),F(n)]
0037    43 00 00 00    02 00 00 00    01 00 00 00    |     push R1
0040    43 00 00 00    02 00 00 00    00 00 00 00    |     push R0
0043    45 00 00 00                                  |     add        // stack = [F(n+1),F(n+2)]
0044    43 00 00 00    00 00 00 00    01 00 00 00    |     push 1     // dx++
0047    43 00 00 00    02 00 00 00    03 00 00 00    |     push dx
0050    45 00 00 00                                  |     add
0051    44 00 00 00    02 00 00 00    03 00 00 00    |     pop dx
0054    43 00 00 00    02 00 00 00    03 00 00 00    |     push dx
0057    43 00 00 00    02 00 00 00    02 00 00 00    |     push cx
0060    4D 00 00 00    40 00 00 00                   |     je 2:     // if dx == cx
0062    4F 00 00 00    1C 00 00 00                   |     call fibonacci:   // recursion
0064    5A 00 00 00                                  |     ret
